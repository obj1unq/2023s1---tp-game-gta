import crash.*
import estados.*
import wollok.game.*


describe " test de  posiciones de Crash  " {
	
	test " Crash corre y  no modifica su posicion inicial " {
        
        assert.equals(game.at(1,2),crash.position())
        crash.correr()
        assert.equals(game.at(1,2),crash.position())
	}
	 test " Crash salta y se  modifica su posicion inicial " {
        
        assert.equals(game.at(1,2),crash.position())
        crash.salto()
        assert.equals(game.at(1,5),crash.position())
    }
    test "Crash salta y vuelve a  su posicion inicial " {
        
        assert.equals(game.at(1,2),crash.position())
        crash.estadoInicial()       
        crash.saltar()
       
        game.schedule(290,{assert.equals(game.at(1,2),crash.position())})
	}
	
	
}

describe " Test de  Estados de Crash"{
	
	test "Crash cambia su  estado inicial " {
        
        assert.equals(reposo,crash.estadoActual())      
        crash.cambiarEstado()
        assert.equals(pasoDerecho,crash.estadoActual())
        crash.cambiarEstado()
        assert.equals(pasoIzquierdo,crash.estadoActual())
        crash.cambiarEstado()
        assert.equals(reposo,crash.estadoActual())
	}
	test "Crash corre y vuelve a su  estado inicial " {
        
        assert.equals(reposo,crash.estadoActual())      
        game.schedule(300,{assert.equals(reposo,crash.estadoActual())})
        
	}
	//test "Crash salta y su  estado se modifica  " {
	
	  //  assert.equals(reposo,crash.estadoActual())
	    ///crash.estadoInicial()
	   // crash.saltar()
       // game.schedule(290,{assert.equals(reposo,crash.estadoActual()})
	//}
	
}
	
	
	
	
	
}